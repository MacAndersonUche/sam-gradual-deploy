To modify the logic to get the run ID of the GitHub Actions workflow triggered from an AWS CodeBuild project and pass it into the `checkGithubWorkflowStatus` function, you can follow these steps:
1. **Trigger GitHub Actions Workflow from CodeBuild**: Use the AWS SDK for JavaScript within your CodeBuild project to trigger the GitHub Actions workflow in Repo B. You can do this by making a POST request to the GitHub API's workflow dispatch endpoint. The response from this request will include the run ID of the triggered workflow.
2. **Pass the Run ID to the `checkGithubWorkflowStatus` Function**: Modify the `checkGithubWorkflowStatus` function to accept the run ID as a parameter. This function will then use the run ID to check the status of the GitHub Actions workflow run.
3. **Fail CodeBuild Project if GitHub Actions Workflow Fails**: If the GitHub Actions workflow fails, you can then fail the CodeBuild project. This can be done by exiting the buildspec script with a non-zero exit code.
Here's an updated example of how you might implement this in your CodeBuild project's buildspec file using Node.js:
```yaml
version: 0.2
phases:
 install:
    runtime-versions:
      nodejs: 14
    commands:
      - echo Installing dependencies...
      - npm install axios
 pre_build:
    commands:
      - echo Triggering GitHub Actions workflow in Repo B...
      - node trigger_github_workflow.js
      - echo $RUN_ID > run_id.txt
 build:
    commands:
      - echo Checking GitHub Actions workflow status...
      - RUN_ID=$(cat run_id.txt)
      - node check_github_workflow_status.js $RUN_ID
      - if [ $? -ne 0 ]; then exit 1; fi
```
In this example, `trigger_github_workflow.js` is a Node.js script that uses the `axios` library to make a POST request to the GitHub API to trigger the GitHub Actions workflow in Repo B. The response from this request is expected to include the run ID of the triggered workflow, which is then saved to a file named `run_id.txt`.
`check_github_workflow_status.js` is another Node.js script that checks the status of the GitHub Actions workflow run using the run ID passed as a command-line argument. It exits with a non-zero status code if the workflow fails.
Here's a simplified example of what `trigger_github_workflow.js` might look like:
```javascript
const axios = require('axios');
const fs = require('fs');
async function triggerGithubWorkflow() {
 const url = 'https://api.github.com/repos/<owner>/<repo-b>/actions/workflows/<workflow-id>/dispatches';
 const headers = {
    'Authorization': 'token <your-github-token>',
    'Accept': 'application/vnd.github.v3+json'
 };
 const data = {
    'ref': 'main'
 };
 try {
    const response = await axios.post(url, data, { headers });
    if (response.status === 204) {
      console.log('Workflow triggered successfully.');
      // Assuming the response includes the run ID in the response body
      const runId = response.data.id;
      fs.writeFileSync('run_id.txt', runId);
    } else {
      console.log('Failed to trigger workflow.');
      process.exit(1);
    }
 } catch (error) {
    console.error('Error triggering workflow:', error);
    process.exit(1);
 }
}
triggerGithubWorkflow();
```
And `check_github_workflow_status.js` might look like this:
```javascript
const axios = require('axios');
async function checkGithubWorkflowStatus(runId) {
 const url = `https://api.github.com/repos/<owner>/<repo-b>/actions/runs/${runId}`;
 const headers = {
    'Authorization': 'token <your-github-token>',
    'Accept': 'application/vnd.github.v3+json'
 };
 try {
    const response = await axios.get(url, { headers });
    if (response.status === 200) {
      const workflowStatus = response.data.status;
      if (workflowStatus === 'completed' && response.data.conclusion !== 'success') {
        console.log('GitHub Actions workflow failed.');
        process.exit(1);
      } else {
        console.log('GitHub Actions workflow succeeded.');
      }
    } else {
      console.log('Failed to check workflow status.');
      process.exit(1);
    }
 } catch (error) {
    console.error('Error checking workflow status:', error);
    process.exit(1);
 }
}
const runId = process.argv[3];
checkGithubWorkflowStatus(runId);
```
Replace `<owner>/<repo-b>`, `<workflow-id>`, and `<your-github-token>` with the actual values for your GitHub repository and workflow.
This approach allows you to integrate GitHub Actions workflows into your AWS CodeBuild projects and ensure that the CodeBuild project fails if the GitHub Actions workflow fails.